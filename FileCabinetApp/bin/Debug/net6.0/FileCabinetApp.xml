<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileCabinetApp</name>
    </assembly>
    <members>
        <member name="T:FileCabinetApp.Program">
            <summary>
            Interacts with user.
            </summary>
        </member>
        <member name="M:FileCabinetApp.Program.Main(System.String[])">
            <summary>
            Entry point.
            </summary>
            <param name="consoleArgs">Arguments passed via console.</param>
        </member>
        <member name="T:FileCabinetApp.Services.FileCabinetFileSystemService">
            <summary>
            Stores records with personal information; manages the creation, editing, finding the records.
            </summary>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetFileSystemService.#ctor(System.IO.FileStream,FileCabinetApp.IRecordValidator)">
            <summary>
            Initializes a new instance of the <see cref="T:FileCabinetApp.Services.FileCabinetFileSystemService"/> class.
            </summary>
            <param name="fileStream">Stream to save records.</param>
            <param name="validator">Validator for checking records.</param>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetFileSystemService.CreateRecord(Models.PersonalData)">
            <summary>
            Create record from given parameters.
            </summary>
            <param name="personalData">Represents data of a person.</param>
            <returns>Returns the id of created record.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetFileSystemService.EditRecord(System.Int32,Models.PersonalData)">
            <summary>
            Edit record with the given id.
            </summary>
            <param name="id">Id of record to edit.</param>
            <param name="newData">New personal data for record.</param>
            <exception cref="T:System.ArgumentException">No record matching given id.</exception>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetFileSystemService.FindByField(System.String,System.Object)">
            <summary>
            Find record by value of given field.
            </summary>
            <param name="fieldName">Name of field to search.</param>
            <param name="value">Value of <paramref name="fieldName"/> field to search.</param>
            <returns>Array of found records.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetFileSystemService.GetRecords">
            <summary>
            Get all stored records.
            </summary>
            <returns>All stored records.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetFileSystemService.GetStat">
            <summary>
            Get count of stored records.
            </summary>
            <returns>Count of stored records.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetFileSystemService.MakeSnapshot">
            <summary>
            Makes snapshot of present records.
            </summary>
            <returns>Snapshot of present records.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetFileSystemService.Restore(FileCabinetApp.Services.FileCabinetServiceSnapshot)">
            <summary>
            Restore records from snapshot.
            </summary>
            <param name="snapshot">Snapshot contatining records to restore.</param>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetFileSystemService.Remove(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:FileCabinetApp.Services.FileCabinetMemoryService">
            <summary>
            Stores records with personal information; manages the creation, editing, finding the records.
            </summary>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetMemoryService.#ctor(FileCabinetApp.IRecordValidator)">
            <summary>
            Initializes a new instance of the <see cref="T:FileCabinetApp.Services.FileCabinetMemoryService"/> class.
            </summary>
            <param name="validator">Validates personal data for record.</param>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetMemoryService.MakeSnapshot">
            <summary>
            Makes snapshot of present records.
            </summary>
            <returns>Snapshot of present records.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetMemoryService.CreateRecord(Models.PersonalData)">
            <summary>
            Create record from given parameters.
            </summary>
            <param name="personalData">Represents data of a person.</param>
            <returns>Returns the id of created record.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetMemoryService.EditRecord(System.Int32,Models.PersonalData)">
            <summary>
            Edit record with the given id.
            </summary>
            <param name="id">Id of record to edit.</param>
            <param name="newData">New personal data for record.</param>
            <exception cref="T:System.ArgumentException">No record matching given id.</exception>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetMemoryService.FindByField(System.String,System.Object)">
            <summary>
            Find record by value of given field.
            </summary>
            <param name="fieldName">Name of field to search.</param>
            <param name="value">Value of <paramref name="fieldName"/> field to search.</param>
            <returns>Array of found records.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetMemoryService.GetRecords">
            <summary>
            Get all stored records.
            </summary>
            <returns>All stored records.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetMemoryService.GetStat">
            <summary>
            Get count of stored records.
            </summary>
            <returns>Count of stored records.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetMemoryService.Restore(FileCabinetApp.Services.FileCabinetServiceSnapshot)">
            <summary>
            Restore records from snapshot.
            </summary>
            <param name="snapshot">Snapshot contatining records to restore.</param>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetMemoryService.Remove(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:FileCabinetApp.Services.FileCabinetRecordCsvReader">
            <summary>
            Reads records from csv file.
            </summary>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetRecordCsvReader.#ctor(System.IO.StreamReader)">
            <summary>
            Initializes a new instance of the <see cref="T:FileCabinetApp.Services.FileCabinetRecordCsvReader"/> class.
            </summary>
            <param name="reader">Reader to read data from.</param>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetRecordCsvReader.ReadAll">
            <summary>
            Reads all records.
            </summary>
            <returns>All readed records.</returns>
        </member>
        <member name="T:FileCabinetApp.Services.FileCabinetRecordCsvWriter">
            <summary>
            Class for writing data to csv file.
            </summary>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetRecordCsvWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:FileCabinetApp.Services.FileCabinetRecordCsvWriter"/> class.
            </summary>
            <param name="writer">Writer for saving data.</param>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetRecordCsvWriter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetRecordCsvWriter.Write(Models.FileCabinetRecord)">
            <summary>
            Writes record to given stream.
            </summary>
            <param name="record">Record to write.</param>
        </member>
        <member name="T:FileCabinetApp.Services.FileCabinetRecordXmlReader">
            <summary>
            Reads records from xml file.
            </summary>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetRecordXmlReader.#ctor(System.IO.StreamReader)">
            <summary>
            Initializes a new instance of the <see cref="T:FileCabinetApp.Services.FileCabinetRecordXmlReader"/> class.
            </summary>
            <param name="reader">Reader to read data from.</param>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetRecordXmlReader.ReadAll">
            <summary>
            Reads all records.
            </summary>
            <returns>All readed records.</returns>
        </member>
        <member name="T:FileCabinetApp.Services.FileCabinetRecordXmlWriter">
            <summary>
            Class for writing data to xml file.
            </summary>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetRecordXmlWriter.#ctor(System.IO.StreamWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:FileCabinetApp.Services.FileCabinetRecordXmlWriter"/> class.
            </summary>
            <param name="writer">Writer for saving data.</param>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetRecordXmlWriter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetRecordXmlWriter.Write(Models.FileCabinetRecord)">
            <summary>
            Writes record to given stream.
            </summary>
            <param name="record">Record to write.</param>
        </member>
        <member name="T:FileCabinetApp.Services.FileCabinetServiceSnapshot">
            <summary>
            Represents snapshot of once real records.
            </summary>
        </member>
        <member name="P:FileCabinetApp.Services.FileCabinetServiceSnapshot.Records">
            <summary>
            Gets readonly collection of records.
            </summary>
            <value>Readonly collection of records.</value>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetServiceSnapshot.#ctor(Models.FileCabinetRecord[])">
            <summary>
            Initializes a new instance of the <see cref="T:FileCabinetApp.Services.FileCabinetServiceSnapshot"/> class.
            </summary>
            <param name="records">Records to save.</param>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetServiceSnapshot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FileCabinetApp.Services.FileCabinetServiceSnapshot"/> class.
            </summary>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetServiceSnapshot.SaveToCsv(System.IO.StreamWriter)">
            <summary>
            Saves record to csv file.
            </summary>
            <param name="writer">Writer for writing records to it.</param>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetServiceSnapshot.SaveToXml(System.IO.StreamWriter)">
            <summary>
            Saves record to xml file.
            </summary>
            <param name="writer">Writer for writing records to it.</param>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetServiceSnapshot.LoadFromCsv(System.IO.StreamReader)">
            <summary>
            Loads records from csv file.
            </summary>
            <param name="reader">Stream for reading.</param>
        </member>
        <member name="M:FileCabinetApp.Services.FileCabinetServiceSnapshot.LoadFromXml(System.IO.StreamReader)">
            <summary>
            Loads records from xml file.
            </summary>
            <param name="reader">Stream for reading.</param>
        </member>
        <member name="T:FileCabinetApp.Services.IFileCabinetRecordReader">
            <summary>
            Interface for reading records from stream.
            </summary>
        </member>
        <member name="M:FileCabinetApp.Services.IFileCabinetRecordReader.ReadAll">
            <summary>
            Reads all records.
            </summary>
            <returns>All readed records.</returns>
        </member>
        <member name="T:FileCabinetApp.Services.IFileCabinetRecordWriter">
            <summary>
            Interface for writing data to file.
            </summary>
        </member>
        <member name="M:FileCabinetApp.Services.IFileCabinetRecordWriter.Write(Models.FileCabinetRecord)">
            <summary>
            Writes record to given stream.
            </summary>
            <param name="record">Record to write.</param>
        </member>
        <member name="T:FileCabinetApp.Services.IFileCabinetService">
            <summary>
            Stores records with personal information; manages the creation, editing, finding the records.
            </summary>
        </member>
        <member name="M:FileCabinetApp.Services.IFileCabinetService.CreateRecord(Models.PersonalData)">
            <summary>
            Create record from given parameters.
            </summary>
            <param name="personalData">Represents data of a person.</param>
            <returns>Returns the id of created record.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.IFileCabinetService.EditRecord(System.Int32,Models.PersonalData)">
            <summary>
            Edit record with the given id.
            </summary>
            <param name="id">Id of record to edit.</param>
            <param name="newData">New personal data for record.</param>
            <exception cref="T:System.ArgumentException">No record matching given id.</exception>
        </member>
        <member name="M:FileCabinetApp.Services.IFileCabinetService.FindByField(System.String,System.Object)">
            <summary>
            Find record by value of given field.
            </summary>
            <param name="fieldName">Name of field to search.</param>
            <param name="value">Value of <paramref name="fieldName"/> field to search.</param>
            <returns>Array of found records.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.IFileCabinetService.GetRecords">
            <summary>
            Get all stored records.
            </summary>
            <returns>All stored records.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.IFileCabinetService.GetStat">
            <summary>
            Get count of stored records.
            </summary>
            <returns>Count of stored records.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.IFileCabinetService.MakeSnapshot">
            <summary>
            Makes snapshot of present records.
            </summary>
            <returns>Snapshot of present records.</returns>
        </member>
        <member name="M:FileCabinetApp.Services.IFileCabinetService.Restore(FileCabinetApp.Services.FileCabinetServiceSnapshot)">
            <summary>
            Restore records from snapshot.
            </summary>
            <param name="snapshot">Snapshot contatining records to restore.</param>
        </member>
        <member name="M:FileCabinetApp.Services.IFileCabinetService.Remove(System.Int32)">
            <summary>
            Remove record with given id.
            </summary>
            <param name="id">Id of record to remove.</param>
            <returns>True if record has been deleted.</returns>
        </member>
        <member name="T:FileCabinetApp.Validators.CustomValidator">
            <summary>
            Class for custom validation personal data.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.CustomValidator.SchoolGradeMinValue">
            <summary>
            Minimum valid school grade value.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.CustomValidator.SchoolGradeMaxValue">
            <summary>
            Maximum valid school grade value.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.CustomValidator.AverageMarkMinValue">
            <summary>
            Minimum valid average mark value.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.CustomValidator.AverageMarkMaxValue">
            <summary>
            Maximum valid average mark value.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.CustomValidator.ClassLetterMinValue">
            <summary>
            Minimum valid class letter value.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.CustomValidator.ClassLetterMaxValue">
            <summary>
            Maximum valid class letter value.
            </summary>
        </member>
        <member name="P:FileCabinetApp.Validators.CustomValidator.NameMinLen">
            <summary>
            Gets or sets minimum length for name.
            </summary>
            <value>Minimum length for name.</value>
        </member>
        <member name="P:FileCabinetApp.Validators.CustomValidator.DateOfBirthMinValue">
            <summary>
            Gets or sets minimum valid date of birth value.
            </summary>
            <value>Minimum valid date of birth value.</value>
        </member>
        <member name="P:FileCabinetApp.Validators.CustomValidator.DateOfBirthMaxValue">
            <summary>
            Gets or sets maximum valid date of birth value.
            </summary>
            <value>Maximum valid date of birth value.</value>
        </member>
        <member name="M:FileCabinetApp.Validators.CustomValidator.ValidateFirstName(System.String)">
            <summary>
            Check first name for valid value.
            </summary>
            <param name="firstName">Value to check.</param>
            <exception cref="T:System.ArgumentNullException">If firstName param is null.</exception>
            <exception cref="T:System.ArgumentException">If firstName has invalid length or contains invalid symbols.</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.CustomValidator.ValidateLastName(System.String)">
            <summary>
            Check last name for valid value.
            </summary>
            <param name="lastName">Value to check.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="lastName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="lastName"/> has invalid length or contains invalid symbols.</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.CustomValidator.ValidateDateOfBirth(System.DateTime)">
            <summary>
            Check date of birth for valid value.
            </summary>
            <param name="dateOfBirth">Value to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="dateOfBirth"/> is less than <see cref="P:FileCabinetApp.Validators.CustomValidator.DateOfBirthMinValue"/> or more than <see cref="P:FileCabinetApp.Validators.CustomValidator.DateOfBirthMaxValue"/>.</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.CustomValidator.ValidateSchoolGrade(System.Int16)">
            <summary>
            Check school grade for valid value.
            </summary>
            <param name="schoolGrade">Value to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="schoolGrade"/> is less than <see cref="F:FileCabinetApp.Validators.CustomValidator.SchoolGradeMinValue"/> or more than <see cref="F:FileCabinetApp.Validators.CustomValidator.SchoolGradeMaxValue"/>.</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.CustomValidator.ValidateAverageMark(System.Decimal)">
            <summary>
            Check average mark for valid value.
            </summary>
            <param name="averageMark">Value to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="averageMark"/> is less than <see cref="F:FileCabinetApp.Validators.CustomValidator.AverageMarkMinValue"/> or more than <see cref="F:FileCabinetApp.Validators.CustomValidator.AverageMarkMaxValue"/>.</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.CustomValidator.ValidateClassLetter(System.Char)">
            <summary>
            Check class letter for valid value.
            </summary>
            <param name="classLetter">Value to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="classLetter"/> is not between <see cref="F:FileCabinetApp.Validators.CustomValidator.ClassLetterMinValue"/> and <see cref="F:FileCabinetApp.Validators.CustomValidator.ClassLetterMaxValue"/> values.</exception>
        </member>
        <member name="T:FileCabinetApp.Validators.DefaultValidator">
            <summary>
            Class for default validation personal data.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.DefaultValidator.FirstNameMinLen">
            <summary>
            Minimal valid first name length.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.DefaultValidator.FirstNameMaxLen">
            <summary>
            Maximun valid last name length.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.DefaultValidator.LastNameMinLen">
            <summary>
            Minimum valid last name length.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.DefaultValidator.LastNameMaxLen">
            <summary>
            Maximum valid last name length.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.DefaultValidator.SchoolGradeMinValue">
            <summary>
            Minimum valid school grade value.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.DefaultValidator.SchoolGradeMaxValue">
            <summary>
            Maximum valid school grade value.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.DefaultValidator.AverageMarkMinValue">
            <summary>
            Minimum valid average mark value.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.DefaultValidator.AverageMarkMaxValue">
            <summary>
            Maximum valid average mark value.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.DefaultValidator.ClassLetterMinValue">
            <summary>
            Minimum valid class letter value.
            </summary>
        </member>
        <member name="F:FileCabinetApp.Validators.DefaultValidator.ClassLetterMaxValue">
            <summary>
            Maximum valid class letter value.
            </summary>
        </member>
        <member name="P:FileCabinetApp.Validators.DefaultValidator.DateOfBirthMinValue">
            <summary>
            Gets or sets minimum valid date of birth value.
            </summary>
            <value>Minimum valid date of birth value.</value>
        </member>
        <member name="P:FileCabinetApp.Validators.DefaultValidator.DateOfBirthMaxValue">
            <summary>
            Gets maximum valid date of birth value.
            </summary>
            <value>Maximum valid date of birth value.</value>
        </member>
        <member name="M:FileCabinetApp.Validators.DefaultValidator.ValidateFirstName(System.String)">
            <summary>
            Check first name for valid value.
            </summary>
            <param name="firstName">Value to check.</param>
            <exception cref="T:System.ArgumentNullException">If firstName param is null.</exception>
            <exception cref="T:System.ArgumentException">If firstName has invalid length or contains invalid symbols.</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.DefaultValidator.ValidateLastName(System.String)">
            <summary>
            Check last name for valid value.
            </summary>
            <param name="lastName">Value to check.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="lastName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="lastName"/> has invalid length or contains invalid symbols.</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.DefaultValidator.ValidateDateOfBirth(System.DateTime)">
            <summary>
            Check date of birth for valid value.
            </summary>
            <param name="dateOfBirth">Value to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="dateOfBirth"/> is less than <see cref="P:FileCabinetApp.Validators.DefaultValidator.DateOfBirthMinValue"/> or more than <see cref="P:FileCabinetApp.Validators.DefaultValidator.DateOfBirthMaxValue"/>.</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.DefaultValidator.ValidateSchoolGrade(System.Int16)">
            <summary>
            Check school grade for valid value.
            </summary>
            <param name="schoolGrade">Value to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="schoolGrade"/> is less than <see cref="F:FileCabinetApp.Validators.DefaultValidator.SchoolGradeMinValue"/> or more than <see cref="F:FileCabinetApp.Validators.DefaultValidator.SchoolGradeMaxValue"/>.</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.DefaultValidator.ValidateAverageMark(System.Decimal)">
            <summary>
            Check average mark for valid value.
            </summary>
            <param name="averageMark">Value to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="averageMark"/> is less than <see cref="F:FileCabinetApp.Validators.DefaultValidator.AverageMarkMinValue"/> or more than <see cref="F:FileCabinetApp.Validators.DefaultValidator.AverageMarkMaxValue"/>.</exception>
        </member>
        <member name="M:FileCabinetApp.Validators.DefaultValidator.ValidateClassLetter(System.Char)">
            <summary>
            Check class letter for valid value.
            </summary>
            <param name="classLetter">Value to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="classLetter"/> is less than <see cref="F:FileCabinetApp.Validators.DefaultValidator.ClassLetterMinValue"/> or more than <see cref="F:FileCabinetApp.Validators.DefaultValidator.ClassLetterMaxValue"/>.</exception>
        </member>
        <member name="T:FileCabinetApp.IRecordValidator">
            <summary>
            Interface for validation personal data.
            </summary>
        </member>
        <member name="M:FileCabinetApp.IRecordValidator.ValidateParameters(Models.PersonalData)">
            <summary>
            Validated personal data.
            </summary>
            <param name="personalData">Personal data to validate.</param>
        </member>
        <member name="M:FileCabinetApp.IRecordValidator.ValidateFirstName(System.String)">
            <summary>
            Check first name for valid value.
            </summary>
            <param name="firstName">Value to check.</param>
        </member>
        <member name="M:FileCabinetApp.IRecordValidator.ValidateLastName(System.String)">
            <summary>
            Check last name for valid value.
            </summary>
            <param name="lastName">Value to check.</param>
        </member>
        <member name="M:FileCabinetApp.IRecordValidator.ValidateDateOfBirth(System.DateTime)">
            <summary>
            Check date of birth for valid value.
            </summary>
            <param name="dateOfBirth">Value to check.</param>
        </member>
        <member name="M:FileCabinetApp.IRecordValidator.ValidateSchoolGrade(System.Int16)">
            <summary>
            Check school grade for valid value.
            </summary>
            <param name="schoolGrade">Value to check.</param>
        </member>
        <member name="M:FileCabinetApp.IRecordValidator.ValidateAverageMark(System.Decimal)">
            <summary>
            Check average mark for valid value.
            </summary>
            <param name="averageMark">Value to check.</param>
        </member>
        <member name="M:FileCabinetApp.IRecordValidator.ValidateClassLetter(System.Char)">
            <summary>
            Check class letter for valid value.
            </summary>
            <param name="classLetter">Value to check.</param>
        </member>
    </members>
</doc>
